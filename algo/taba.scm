(import (scheme base)
        (scheme write)
        (only (srfi 1) iota))

(define (writeln x) (write x) (newline))

;; Not TABA
(define (convolve as bs)
  (if (or (null? as)
          (null? bs))
      '()
      (cons (cons (car as)
                  (car bs))
            (convolve (cdr as)
                      (cdr bs)))))

;; TABA (there and back again)
(define (taba-fold init mapfun xs)
  (letrec ((rec (lambda (tail)
                  (if (null? tail)
                      (values init xs)
                      (let-values (((acc rtail)
                                    (rec (cdr tail))))
                        (values (mapfun acc (car tail) (car rtail))
                                (cdr rtail)))))))
    (let-values (((acc rtail)
                  (rec xs)))
      (unless (null? rtail) (error "Can't"))
      acc)))

(define (convolve-reverse xs)
  (taba-fold '()
             (lambda (acc a b)
               (cons (cons a b)
                     acc))
             xs))

(define (palindrome? xs)
  (taba-fold #t
             (lambda (acc a b)
               (and acc (equal? a b)))
             xs))

(for-each writeln (convolve (iota 10) (reverse (iota 10))))
(newline)
(for-each writeln (convolve-reverse (iota 10)))
(newline)
(writeln (palindrome? '()))
(writeln (palindrome? '(1)))
(writeln (palindrome? '(2 1 2)))
(writeln (palindrome? '(2 1 1 2)))
(writeln (palindrome? '(1 2 3)))
